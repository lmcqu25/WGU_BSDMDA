DROP TABLE IF EXISTS seasonality;
CREATE TABLE seasonality (
    dvd_id          NUMERIC,
    dvd_title       VARCHAR(50),
    dvd_category_id NUMERIC,
    dvd_category    VARCHAR(50),
    rental_date     TIMESTAMP WITHOUT TIME ZONE,
    rental_rate     NUMERIC
); 




DROP TABLE IF EXISTS seasonality_sum;
CREATE TABLE seasonality_sum (
	season				VARCHAR(20),
	dvd_category		VARCHAR(50),
	qty_rented			NUMERIC,
	sales_in_dollars	NUMERIC
);



INSERT INTO seasonality
    (dvd_id, dvd_title, dvd_category_id, dvd_category,
    rental_date, rental_rate)
SELECT fc.film_id, f.title, fc.category_id,
        c.name, (r.rental_date::TIMESTAMP::DATE), 
		f.rental_rate
    FROM rental AS r
    INNER JOIN inventory AS i
    ON r.inventory_id = i.inventory_id
    INNER JOIN film AS f
    on f.film_id = i.film_id
    INNER JOIN film_category AS fc
    ON fc.film_id = f.film_id
    INNER JOIN category AS c
    ON c.category_id = fc.category_id;
	


CREATE OR REPLACE FUNCTION seasonality_sum_function()
	RETURNS TRIGGER
	LANGUAGE plpgsql
	AS 
$$
BEGIN	

DELETE FROM seasonality_sum;

INSERT INTO seasonality_sum (	
SELECT 
        CASE
            WHEN rental_date BETWEEN '2004-12-21' AND '2005-03-19' THEN 'Winter' 
            WHEN rental_date BETWEEN '2005-12-21' AND '2006-03-19' THEN 'Winter' 
            WHEN rental_date BETWEEN '2005-03-20' AND '2005-06-20' THEN 'Spring' 
            WHEN rental_date BETWEEN '2005-06-21' AND '2005-09-21' THEN 'Summer' 
            WHEN rental_date BETWEEN '2005-09-21' AND '2005-12-21' THEN 'Fall' 
            ELSE 'N/A'
        END AS season, dvd_category, COUNT(dvd_category) AS qty_rented, SUM(rental_rate) AS sales_in_dollars
    FROM seasonality
    GROUP BY 1, 2
    ORDER BY 3 DESC
);

RETURN NEW;

END;

$$




CREATE TRIGGER seasonality_sum_update
AFTER INSERT ON seasonality
FOR EACH STATEMENT
EXECUTE PROCEDURE seasonality_sum_function();



/* The stored procedure should be executed every three months
to update the seasonal data in the seasonality and seasonlaity summary tables.
*/

DROP PROCEDURE IF EXISTS update_tables();
CREATE PROCEDURE update_tables()
LANGUAGE plpgsql
AS $$
BEGIN

DELETE FROM seasonality;
INSERT INTO seasonality (dvd_id, dvd_title, dvd_category_id, dvd_category,
    rental_date, rental_rate)
SELECT fc.film_id, f.title, fc.category_id,
        c.name, (r.rental_date::TIMESTAMP::DATE), 
		f.rental_rate
    FROM rental AS r
    INNER JOIN inventory AS i
    ON r.inventory_id = i.inventory_id
    INNER JOIN film AS f
    on f.film_id = i.film_id
    INNER JOIN film_category AS fc
    ON fc.film_id = f.film_id
    INNER JOIN category AS c
    ON c.category_id = fc.category_id;

END;

$$




CALL update_tables();


SELECT *
FROM seasonality;

SELECT *
FROM seasonality_sum;

CALL update_tables();
INSERT INTO seasonality
    (dvd_id, dvd_title, dvd_category_id, dvd_category,
    rental_date, rental_rate)
	VALUES (001, 'Movie1', 15, 'Sports', '2005-08-14', 2.99),
			(002, 'Movie2', 2, 'Animation', '2005-08-16', 3.99),
			(003, 'Movie3', 1, 'Action', '2005-08-12', 5.99);